#!/usr/bin/python

import argparse
import fnmatch
import os
import sys

from IBGETools.Map import Map, MapFactory
from IBGETools.Utils import KMLFileWriter, TileScriptFileWriter


def ScanDirectoryForPDFs(directory):
    pdf_paths = []

    for root, _, filenames in os.walk(directory):
        # All IBGE PDFs we are interested at start with a number,
        # so we can rule out a few by filtering the file name.
        for filename in fnmatch.filter(filenames, "[0-9]*.pdf"):
            pdf_paths.append(os.path.join(root, filename))

    return pdf_paths


def GetMapFromPath(map_path):
    ibge_map = MapFactory(map_path)

    if not ibge_map:
        print >> sys.stderr, "Not supported: " + map_path
        return ibge_map

    if not ibge_map.IsValid():
        print >> sys.stderr, "Error parsing: " + map_path
        return None

    return ibge_map


def CheckForDirectory(path):
    if not os.path.isdir(path):
        raise argparse.ArgumentTypeError("%s is not a directory." % path)

    return path


def Main():
    parser = argparse.ArgumentParser(
        description="Generates KML or map tiles from IBGE PDFs.")

    group = parser.add_mutually_exclusive_group(required=True)

    parser.add_argument("-v", action="store_true", help= "Verbose mode.")
    group.add_argument("--kml", action="store_true", help=
            "Generates PNGs and a .kml file that can be imported to JOSM "
            "(via PicLayer plugin) or opened by Google Earth.")
    group.add_argument("--tiles", action="store_true", help=
            "Generates TIFFs and a shell script that will generate map tiles "
            "using GDAL tools (notable gdal2tiles.py) when executed.")
    parser.add_argument("directory", nargs=1, type=CheckForDirectory, help=
            "Directory to be recursively scanned for IBGE PDFs files.")
    parser.add_argument("--id", required=True, help=
            "An identifier to be used as prefix for the generated files.")

    args = parser.parse_args()

    directory = args.directory[0]

    writer = None
    output_filename = None

    if args.kml:
        writer = KMLFileWriter
        save_image = Map.SaveMapImageAsPNG
        output_filename = "%s.kml" % args.id
    else:
        writer = TileScriptFileWriter
        save_image = Map.SaveMapImageAsTIFF
        output_filename = "%s_make_tiles.sh" % args.id

    map_paths = ScanDirectoryForPDFs(directory)
    map_list = []

    for map_path in map_paths:
        if args.v:
            print "Processing:", map_path

        ibge_map = GetMapFromPath(map_path)
        if not ibge_map:
            continue

        if args.v:
            print "Processed:", map_path

        map_list.append(ibge_map)
        basename = os.path.splitext(os.path.basename(map_path))[0]

        save_image(ibge_map, "%s_%s" % (args.id, basename))
        ibge_map.Dispose()

    output = open(output_filename, "w")
    writer(output, args.id, map_list)
    output.close()


if __name__ == "__main__":
    Main()
