#!/usr/bin/python

import argparse
import fnmatch
import os
import sys

from concurrent.futures import ProcessPoolExecutor

from IBGETools.Geometry import RegionFactory
from IBGETools.Map import Map, MapFactory
from IBGETools.Utils import KMLFileWriter, TileScriptFileWriter


def ScanDirectoryForPDFs(directory):
    pdf_paths = []

    for root, _, filenames in os.walk(directory):
        # All IBGE PDFs we are interested at start with a number,
        # so we can rule out a few by filtering the file name.
        for filename in fnmatch.filter(filenames, "[0-9]*.pdf"):
            pdf_paths.append(os.path.join(root, filename))

    return pdf_paths


def GetMapFromPath(map_path):
    ibge_map = MapFactory(map_path)

    if not ibge_map:
        print >> sys.stderr, "Not supported: " + map_path
        return ibge_map

    if not ibge_map.IsValid():
        print >> sys.stderr, "Error parsing: " + map_path
        return None

    return ibge_map


def CheckForDirectory(path):
    if not os.path.isdir(path):
        raise argparse.ArgumentTypeError("%s is not a directory." % path)

    return path


def ProcessMap(executor_args):
    map_path, id, save_as_png, verbose = executor_args

    if verbose:
        print "Processing:", map_path

    ibge_map = GetMapFromPath(map_path)
    if not ibge_map:
        return None

    basename = os.path.splitext(os.path.basename(map_path))[0]

    if (save_as_png):
        ibge_map.SaveMapImageAsPNG("%s_%s" % (id, basename))
    else:
        ibge_map.SaveMapImageAsTIFF("%s_%s" % (id, basename))

    # This will free the resources and make the Map class "picklable".
    ibge_map.Dispose()

    if verbose:
        print "Processed:", map_path

    return ibge_map


def Main():
    parser = argparse.ArgumentParser(
        description="Generates KML or map tiles from IBGE PDFs.")

    group = parser.add_mutually_exclusive_group(required=True)

    parser.add_argument("-v", action="store_true", help= "Verbose mode.")
    parser.add_argument("--jobs", type=int, default=1, help=
            "Number of jobs for processing PDFs, be aware of memory usage.")
    group.add_argument("--kml", action="store_true", help=
            "Generates PNGs and a .kml file that can be imported to JOSM "
            "(via PicLayer plugin) or opened by Google Earth.")
    group.add_argument("--tiles", action="store_true", help=
            "Generates TIFFs and a shell script that will generate map tiles "
            "using GDAL tools and TileMill when executed.")
    parser.add_argument("--upload", action="store_true", help=
            "The generated shell script will also upload the tiles to the "
            "cloud. Make sure to have ~/.tilemill/config.json properly set "
            "with auth keys.")
    parser.add_argument("directory", nargs=1, type=CheckForDirectory, help=
            "Directory to be recursively scanned for IBGE PDFs files.")
    parser.add_argument("--id", required=True, help=
            "An identifier to be used as prefix for the generated files.")

    args = parser.parse_args()

    directory = args.directory[0]

    writer = None
    output_filename = None

    if args.kml:
        writer = KMLFileWriter
        output_filename = "%s.kml" % args.id
    else:
        writer = TileScriptFileWriter
        output_filename = "%s_make_tiles.sh" % args.id

    map_paths = ScanDirectoryForPDFs(directory)

    executor = ProcessPoolExecutor(max_workers=args.jobs)
    executor_args = [
            (map_path, args.id, args.kml, args.v) for map_path in map_paths]

    maps_list = []
    for ibge_map in executor.map(ProcessMap, executor_args):
        if ibge_map:
            maps_list.append(ibge_map)

    region = RegionFactory(maps_list)
    if args.v:
        print "Filtered %d images from %d." % (
                len(maps_list) - len(region.GetRectangles()), len(maps_list))

    output = open(output_filename, "w")
    writer(output, args.id, region, args.upload)
    output.close()


if __name__ == "__main__":
    Main()
